import java.util.Arrays;

public class customerService
{ 
    private int numberOfRepresentatives; 
    private int numberOfPossibleScores; 
    private int [][] recentTwentyScores;
    private int [][] scores;
    private double[] avgScoresForReps;

    /**
     * Constructor for the class.
     * @param numOfReps is the number of representatives in the table.
     * @param NumOfScores is the number of scores that the reps have gotten.
     */
    public customerService (int numOfReps, int NumOfScores) 
    { 
        this.numberOfRepresentatives = numOfReps;
        this.numberOfPossibleScores =  NumOfScores; 
        this.scores =  new int [this.numberOfRepresentatives][this.numberOfPossibleScores];
        this.recentTwentyScores = new int[this.numberOfRepresentatives][20];
        this.avgScoresForReps = new double [this.numberOfRepresentatives];

        for (int i = 0;  i < this.scores.length;  i++) 
        { 
            Arrays.fill(this.scores [i],0);
        }
    }

    /**
     * @param numOfReps is the number of represntative that take calls for the customer.
     * @param score is the score the rep received for his/her customer service.
     */
    public void AddPrevoiusTwentyRepScore(int numOfReps, int score)
    {
        for(int i = this.recentTwentyScores[numOfReps].length - 1; i > 0; i-- )
        {
            recentTwentyScores[numOfReps][i] = recentTwentyScores[numOfReps][i - 1];
        }
        recentTwentyScores[numOfReps][0] = score;
    }

    /**
     * @param repNum is the number of a rep.
     * loops through the array of recentTwentyScores in order to collect 20 scores. however is doesn't get the average
     * until there are 20 scores in the array.
     */
    public void getAvgScoresPerRep(int repNum)
    {
        boolean isTwenty = true;
        int sum = 0;    
        for(int p= 0; p < this.recentTwentyScores[repNum].length;p++)
        {
            if(this.recentTwentyScores[repNum][p] == 0)
            {
                isTwenty = false;
                break;
            }
            sum = sum + this.recentTwentyScores[repNum][p];
        }
        if (!isTwenty)
        {
            avgScoresForReps[repNum] = 0;
        }
        avgScoresForReps[repNum] = sum / this.recentTwentyScores[repNum].length;
    }

    /**
     * @param repNum is the number of the representative.
     * @return the average score for a rep of a specific number.
     */
    public double getAvg(int repNum)
    {
        return avgScoresForReps[repNum];
    }

    /**
     * @param repNum is the number that identifies a rep in the table
     * @param rating which is the customer service
     * rating that a rep has received.
     * 
     */
    public void addNewScore (int repNum, int rating) 
    { 
        try{

            this.scores [repNum][rating - 1] += 1;
            double lastAvg = getAvg(repNum);
            AddPrevoiusTwentyRepScore(repNum, rating);
            getAvgScoresPerRep(repNum);
            double newAvg = getAvg(repNum);

            if(lastAvg >= 2.5 && newAvg < 2.5)
            {
                System.out.println("Rep " + repNum + "â€™s " + "running average has dropped to " + getAvg(repNum));
            }

        }catch(Exception e)
        {
            System.out.println("Exception occured the number that was enter was not in the array.");
        }
    }

    /**
     * gets the cumulative scores from a certain rep by his/her number in the table and creates a new array of 
     * length 6 in order to hold the scores and the average of the specific rep. 
     * 
     * @ param repNum is the number of a representative in the table.
     * @return the array cumulativeScore.
     */
    public double[] getCumulativeScores(int repNum)
    {   
        double[] cumulativeScore = new double[6];
        for(int i = 0; i < this.scores[repNum].length - 1;i++)
        {
            cumulativeScore[i] = this.scores[repNum][i];
        }
        cumulativeScore[5] = getAvg(repNum);

        return cumulativeScore;
    }

    /**
     * loops through the scores and fills the customer service rating/scores with 0 thus reseting the scores.
     */
    public void resetCumulativeScoresAndAvgForAllReps()
    {
        for(int i = 0; i < this.scores.length;i++){
            Arrays.fill(this.scores[i], 0);
        }
    }

    /**
     * @param repNum is the id number of a rep.
     * loops through the array of a specific rep and resets that reps scores.
     */
    public void resetCumulativeScoresAndAvgForSingleRep(int repNum)
    {

        for(int i = 0; i< this.scores.length; i++){
            Arrays.fill(this.scores[repNum], 0);
        }

    }

    /** @param repNum is the rep id number
     * @return an array of length this.numberOfPossibleScores with the current score totals for the repNum.
     */ 

    public int[] getCumulativeScoreForRep (int repNum) 
    { 
        return Arrays.copyOf(this.scores[repNum],this.scores [repNum].length); 
    }    

}
